Native Commands: 
--------------------------------
-Viewed by typing ??n
--------------------------------

skip
+ skip setting a value for the specific attribute, just this one time

block
+ skip setting a value for the specific attribute, and never bring it up again.

c 
+ shorthand for 'crap', renders a string of 10 random a-z chars 

crap 
+ renders a string of 10 random a-z chars 

crap: 
+ renders a string of n random a-z chars

lit: 
+ renders n literally

dec 
+ renders a four digit decimal xx.xx 

email
+ renders an email in the format firstname

zip 
+ Renders a 5 digit zip codr

address 
+ Renders a simple address

fk - See Foreign Keys

ip
+renders a typical IP address

fullname
+renders a first and last name

file:
+renders a filename by having the right side determine the file type 
ie. file:.exe renders garbage text with a .exe extension
OUTPUT[could be] giwnusdanw.exe

date:
+renders a date in yyyy-mm-dd
ie. date
OUTPUT[could be] 2012-03-04

datetime
+renders a timestamp.
ie. datetime
OUTPUT[could be] 2012-03-04 12:34:22.45

num
+renders a number from 0 to 50000
ie. num
OUTPUT[could be] 34342

num:
+renders a number within a specific range
ie. num:300-6000
OUTPUT[could be] 5342

num::
+renders a collection of numbers of a specific range 
ie. num:0-2:5 would render 5 numbers ranging from 0 to 2 next to eachother
OUTPUT[could be] 01201

boolean

iter
+renders a number from 0 to the number of iterations
ie iter (while running with 30 iterations/model)
OUTPUT[could be] 14


User Added Collection Commands:
---------------------------------------------------
-Viewed by typing ??a
---------------------------------------------------
in a directory in the same place as the python file (DATA_PATH, defaulting to groups/),
7 native files are kept, there are two purposes of these, and by purpose these are:

//Static data
city.wtf : a list of city names
state.wtf : a list of states
firstname.wtf : a list of first names
lastname.wtf : a list of last names

+These provide a basic start for some common stuff. To reference a collection, just use the name of the file, minus the extension. The native firstname, lastname, state, and city derive from these. So lets say there are a list of statuses that you want to be using randomly. So you make a file called status.wtf (if .wtf is your extension) with one possibility per line. Then, to use that, you'd type 'status'. If it throws a 'command not recognized' error, then it was either not loaded, or you typed it wrong. To double check, type ??a to make sure the command is on the added collection list.

//Native Dynamic data
custom.wtf : a list of custom tags (See below)
remember.wtf : a list of remembered render options for specific model attributes, stored automatically. 
deny.wtf : a list of model attributes that are blocked.

+These are as-is, and may be modified while the program is not running to change defaults. If you want to completely redefine how
to render attributes, simple delete the remember file and re-choose. Same goes with the deny and custom files, but why would you want to delete customs!?



Custom Commands: 
----------------------------------------------------
-Viewed by typing ??c
----------------------------------------------------
Custom commands can be created and referenced across usages, namely every time a custom command, it is saved and can just be referenced by it's name later instead of typing it all out again. 
A custom command would look like so:

mycommand>"Entry "+iter+" section "+num:0-50

so we're pretty much concatenating the existing commands in with strings.

Two things NOT to do here though: 
(1)-Don't use a custom inside a custom
(2)-Dont't just use a command, it NEEDS to have open and closed strings. If you just wanted to render a tag, like num:0-50, then you'd have to put ""+num:0-50.

BUT As i said, it stores custom strings to use them later. So with the above example, when we wanted to use it again, we'd just type mycommand> . if there is anything after the '>', it will overwrite the value. 

To type a custom without saving it, just dont give it a name.
ie. 
>"I dont care about saving this "+firstname





Foreign Keys (fk:) and not breaking stuff. 
----------------------------------------------------
A note about foreign keys, and model names in general. 

When asked, "what's the model name?", the program is expecting the name to mimic that of the model name. 

What I mean is that for a model 'Person', it isn't 'person', 'People', or 'people'. It's 'Person'... 
When typing an association, the singular name of said table is expected, so if an attribute is a foreign key to the model User, we'd put fk:user or fk:User . NOT fk:users or any other plural derivation.

Last thing. The program will output the scenario in a way that puts dependent models below their dependencies. The algorithm that does this requires that all models being referred to be included in the output. So if you just want to output a model Person, but in that Person there is an fk: reference to User (fk:user), if you don't agree to include that user, the script will flip shit, and likely not output what you wanted. 

Because of this, it may be prudent to, in scenarios with large amounts of association, to just output all models. 

(PS): Attempting to set certain attributes (updated_at, deleted_at, to name a few), is not allowed via. scenarios, and will throw an "attribute not mass-assignable" or something silly like that. Add such things to the block list. 


